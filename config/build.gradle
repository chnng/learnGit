apply from: '../config/module_app.gradle'

android {
//    dexOptions {
//        javaMaxHeapSize '4g'
//    }
//    publishNonDefault true
    flavorDimensions 'app', 'url'
    productFlavors {
        // 生产
        Formal {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.formal + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.formal + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.formal + rootProject.ext.port.rcFormal
            buildConfigField 'boolean', 'AUTH', 'true'
        }
        // 预生产
        Prepare {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.prepare + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.prepare + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.prepare + rootProject.ext.port.rcLocal
            applicationIdSuffix '.pre'
        }
        // 演示
        Demo {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.demo + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.demo + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.demo + rootProject.ext.port.rcLocal
            applicationIdSuffix '.demo'
        }
        // 内网
        Local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.prepare + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.local + rootProject.ext.port.rcLocal
            applicationIdSuffix '.local'
        }
        常州武进人民location {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.formal + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.formal + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.formal + rootProject.ext.port.rcFormal
            applicationIdSuffix '.wjrm'
            resValue 'string', 'amap_location', rootProject.ext.location.常州市武进人民医院
        }
        常州武进人民南院location {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.formal + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.formal + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.formal + rootProject.ext.port.rcFormal
            applicationIdSuffix '.wjrmny'
            resValue 'string', 'amap_location', rootProject.ext.location.常州市武进人民医院南院
        }
        山东聊城人民location {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.formal + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.formal + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.formal + rootProject.ext.port.rcFormal
            applicationIdSuffix '.lcrm'
            resValue 'string', 'amap_location', rootProject.ext.location.山东聊城市人民医院
        }
        淄博中西医formal {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.淄博中西医formal + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.淄博中西医formal + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.淄博中西医formal + rootProject.ext.port.rcZibo
        }
        泰兴人民local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.泰兴人民local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.泰兴人民local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.泰兴人民local + rootProject.ext.port.rcLocal
        }
        南阳骨科local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.南阳骨科local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.南阳骨科local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.南阳骨科local + rootProject.ext.port.rcLocal
        }
        北大深圳local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.北大深圳local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.北大深圳local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.北大深圳local + rootProject.ext.port.rcLocal
        }
        广西中医药local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.广西中医药local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.广西中医药local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.广西中医药local + rootProject.ext.port.rcLocal
        }
        上海中西医local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.上海中西医local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.上海中西医local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.上海中西医local + rootProject.ext.port.rcLocal
        }
        无锡三院local {
            dimension 'url'
            buildConfigField 'String', 'BASE_URL', rootProject.ext.domain.无锡三院local + rootProject.ext.port.base
            buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.无锡三院local + rootProject.ext.port.mn
            buildConfigField 'String', 'RC_URL', rootProject.ext.domain.无锡三院local + rootProject.ext.port.rcLocal
        }
        thNati {
            dimension 'app'
            applicationId rootProject.ext.th.applicationId
            versionCode rootProject.ext.th.versionCode
            versionName rootProject.ext.th.versionName
            buildConfigField 'String', 'APP_CODE', rootProject.ext.th.appCode

            resValue 'string', 'bugly_app_id', rootProject.ext.th.buglyAppId
            resValue 'string', 'getui_app_id', rootProject.ext.call.getuiAppId
            resValue 'string', 'getui_app_key', rootProject.ext.call.getuiAppKey
            resValue 'string', 'getui_app_secret', rootProject.ext.call.getuiAppSecret
            resValue 'string', 'getui_master_secret', rootProject.ext.call.getuiMasterSecret
        }
        mnH5 {
            dimension 'app'
            applicationId rootProject.ext.mn.applicationId
            versionCode rootProject.ext.mn.versionCode
            versionName rootProject.ext.mn.versionName
            buildConfigField 'String', 'APP_CODE', rootProject.ext.mn.appCode

            resValue 'string', 'bugly_app_id', rootProject.ext.th.buglyAppId
            resValue 'string', 'getui_app_id', rootProject.ext.call.getuiAppId
            resValue 'string', 'getui_app_key', rootProject.ext.call.getuiAppKey
            resValue 'string', 'getui_app_secret', rootProject.ext.call.getuiAppSecret
            resValue 'string', 'getui_master_secret', rootProject.ext.call.getuiMasterSecret
        }
        mnNati {
            dimension 'app'
            applicationId rootProject.ext.mn.applicationId
            versionCode rootProject.ext.mn.versionCode
            versionName rootProject.ext.mn.versionName
            applicationIdSuffix '.nati'
            buildConfigField 'String', 'APP_CODE', rootProject.ext.mn.appCode
        }
        expertRemote {
            dimension 'app'
            applicationId rootProject.ext.er.applicationId
            versionCode rootProject.ext.er.versionCode
            versionName rootProject.ext.er.versionName
            buildConfigField 'String', 'APP_CODE', rootProject.ext.er.appCode
        }
        ydcf {
            dimension 'app'
            applicationId rootProject.ext.ydcf.applicationId
            versionCode rootProject.ext.ydcf.versionCode
            versionName rootProject.ext.ydcf.versionName
        }
    }

    android.variantFilter { variant ->
        def names = variant.flavors*.name
        if (!names.contains('Formal') && !names.contains('Demo') && !names.contains('Prepare')) {
            variant.setIgnore(true)
        }
//        def nuanpingApp = names.contains('mH5') || names.contains('mNati')
//        if (names.contains('Prepare')) {
//            // Gradle ignores any variants that satisfy the conditions above.
//            setIgnore(nuanpingApp)
//        } else if (names.contains('PreNoSuffix')) {
//            setIgnore(!nuanpingApp)
//        } else
        if (names.contains('thNati')) {
            if (names.contains('常州武进人民location')
                    || names.contains('常州武进人民南院location')
                    || names.contains('山东聊城人民location')
            ) {
                variant.setIgnore(false)
            }
        } else if (names.contains('mnH5')) {
            if (names.contains('Local')
                    || names.contains('北大深圳local')
                    || names.contains('广西中医药local')
                    || names.contains('上海中西医local')
                    || names.contains('无锡三院local')
            ) {
                variant.setIgnore(false)
            }
        } else if (names.contains('expertRemote')) {
            if (names.contains('淄博中西医formal')) {
                variant.setIgnore(false)
            }
        }
        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (variant.buildType.name == 'release' && !variant.ignore) {
//            variant.getFlavors().each() { flavor ->
//            }
            variant.setIgnore(gradle.ext.RELEASE_IGNORE)
        }
    }

//    // map for the version code
//    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]
//
//    android.applicationVariants.all { variant ->
//        // assign different version code for each output
//        variant.outputs.each { output ->
//            output.versionCodeOverride =
//                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1000000 + android.defaultConfig.versionCode
//            println '=============<><><>' + output
//        }
//    }


    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "debug") { // 防止AS无法安装debug包(apk)
            variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + '/apk')
        }
        def baseName = variant.baseName, flavorName = 'app'
        def index = baseName.indexOf('-')
        def flavor = baseName.substring(index, baseName.indexOf('-', index + 1))
        def baseUrl, webUrl
        variant.outputs.each { output ->
            if (baseName.contains('Demo')) {
                output.versionNameOverride = variant.versionName + 'd'
            } else if (baseName.contains('Prepare')) {
                output.versionNameOverride = variant.versionName + 'p'
            } else if (baseName.contains('Local')) {
                output.versionNameOverride = variant.versionName + 'l'
            }
            if (baseName.contains('thNati')) {
                flavorName = rootProject.ext.th.appName
                webUrl = rootProject.ext.domain.formal + rootProject.ext.port.th
                if (baseName.contains('Demo')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.demo + rootProject.ext.port.th
                } else if (baseName.contains('Prepare')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.prepare + rootProject.ext.port.th
                } else if (baseName.contains('常州武进人民location')) {
                    flavorName = '天护武进'
                } else if (baseName.contains('常州武进人民南院location')) {
                    flavorName = '天护武进南'
                } else if (baseName.contains('山东聊城人民location')) {
                    flavorName = '天护聊城'
                }
                variant.mergedFlavor.manifestPlaceholders = [AMAP_KEY: rootProject.ext.th.amapKey]
            } else if (baseName.contains('mnH5') || baseName.contains('mnNati')) {
                flavorName = rootProject.ext.mn.appName
                if (baseName.contains('Demo')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.demoWeb + rootProject.ext.port.mn
                } else if (baseName.contains('Prepare')) {
                    flavorName += flavor
                } else if (baseName.contains('Local')) {
                    flavorName += flavor
                }
                variant.mergedFlavor.manifestPlaceholders = [AMAP_KEY: rootProject.ext.mn.amapKey]
            } else if (baseName.contains('expertRemote')) {
                flavorName = rootProject.ext.er.appName
                webUrl = rootProject.ext.domain.formal + rootProject.ext.port.erFormal
                if (baseName.contains('淄博中西医formal')) {
                    baseUrl = rootProject.ext.domain.淄博中西医formal + rootProject.ext.port.erZiboApi
                    webUrl = rootProject.ext.domain.淄博中西医formal + rootProject.ext.port.erZibo
                } else if (baseName.contains('淄博中西医local')) {
                    webUrl = rootProject.ext.domain.淄博中西医local + rootProject.ext.port.erLocal
                    variant.buildConfigField 'String', 'WEB_URL', rootProject.ext.domain.淄博中西医local + rootProject.ext.port.erLocal
                } else if (baseName.contains('Demo')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.demo + rootProject.ext.port.erLocal
                } else if (baseName.contains('Prepare')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.prepare + rootProject.ext.port.erLocal
                } else if (baseName.contains('Local')) {
                    flavorName += flavor
                    webUrl = rootProject.ext.domain.local + rootProject.ext.port.erLocal
                }
            } else if (baseName.contains('ydcf')) {
                flavorName = rootProject.ext.ydcf.appName
                baseUrl = rootProject.ext.domain.formal + rootProject.ext.port.ydcfApi
                if (baseName.contains('Demo')) {
                    flavorName += flavor
                    baseUrl = rootProject.ext.domain.demo + rootProject.ext.port.ydcfApi
                } else if (baseName.contains('Prepare')) {
                    flavorName += flavor
                    baseUrl = rootProject.ext.domain.prepare + rootProject.ext.port.ydcfApi
                } else if (baseName.contains('Local')) {
                    flavorName += flavor
                    baseUrl = rootProject.ext.domain.local + rootProject.ext.port.ydcfApi
                }
            }
            variant.resValue 'string', 'app_name', flavorName
            if (baseUrl != null) {
                variant.buildConfigField 'String', 'BASE_URL', baseUrl
            }
            if (webUrl != null) {
                variant.buildConfigField 'String', 'WEB_URL', webUrl
            }
            output.outputFileName = "${variant.flavorName}_v${variant.versionName}_${rootProject.releaseTime()}.apk"
            println '====>> variant:' + variant.baseName \
                                       + ' flavor:' + variant.flavorName \
                                       + ' to ' + flavorName \
                                       + ' version:' + variant.versionName \
                                       + ' output:' + output.outputFileName \
                                       + ' appid:' + variant.mergedFlavor.applicationId  \
        }
    }
}

dependencies {
    implementation project(':library:base')
    def flag = gradle.ext.COMPILE_FLAG
    if (flag == gradle.ext.MODULE_ALL || (flag & gradle.ext.MODULE_TH_NATIVE) != 0) {
        thNatiImplementation project(':module:th:native')
    }
    if (flag == gradle.ext.MODULE_ALL || (flag & gradle.ext.MODULE_MN_H5) != 0) {
        mnH5Implementation project(':module:mn:h5')
    }
    if (flag == gradle.ext.MODULE_ALL || (flag & gradle.ext.MODULE_MN_NATIVE) != 0) {
        mnNatiImplementation project(':module:mn:native')
    }
    if (flag == gradle.ext.MODULE_ALL || (flag & gradle.ext.MODULE_ER) != 0) {
        expertRemoteImplementation project(':module:er')
    }
    if (flag == gradle.ext.MODULE_ALL || (flag & gradle.ext.MODULE_YDCF) != 0) {
        ydcfImplementation project(':module:ydcf')
    }
}
